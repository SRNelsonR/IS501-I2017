--1. Consultar la cantidad de likes por publicación.
SELECT *
FROM TBL_PUBLICACIONES;

SELECT CODIGO_PUBLICACION, COUNT(1) AS CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES
GROUP BY CODIGO_PUBLICACION;

--2. Consultar la cantidad de likes por fotografía.
SELECT *
FROM TBL_FOTOS;

SELECT CODIGO_FOTO, COUNT(1) AS CANTIDAD_LIKES
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_FOTO;
--3. Consultar los grupos en los cuales la cantidad de usuarios sea mayor que 5, mostrar el nombre del grupo y la cantidad de usuarios.
SELECT *
FROM TBL_GRUPOS;

SELECT NOMBRE_GRUPO, COUNT(1) AS CANTIDAD_USUARIOS
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY NOMBRE_GRUPO
HAVING COUNT(1)>5;

--4. Mostrar la cantidad de amistades pendientes y rechazadas.
SELECT B.NOMBRE_ESTATUS, COUNT(1) AS CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE A.CODIGO_ESTATUS IN (2,3)
GROUP BY B.NOMBRE_ESTATUS;

SELECT *
FROM TBL_ESTATUS_SOLICITUDES;

--5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
SELECT A.CANTIDAD_AMIGOS, B.NOMBRE_USUARIO
FROM (
  SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_AMIGOS
  FROM TBL_AMIGOS 
  WHERE CODIGO_ESTATUS = 1
  GROUP BY CODIGO_USUARIO
  ORDER BY CANTIDAD_AMIGOS DESC
) A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE ROWNUM = 1;

SELECT *
FROM (
  SELECT B.NOMBRE_USUARIO, COUNT(1) CANTIDAD_AMIGOS
  FROM TBL_AMIGOS A
  INNER JOIN TBL_USUARIOS B
  ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
  WHERE CODIGO_ESTATUS = 1
  GROUP BY B.NOMBRE_USUARIO
)
WHERE CANTIDAD_AMIGOS = (  
  SELECT MAX(CANTIDAD_AMIGOS)
  FROM (
    SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS 
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
  )
);


SELECT A.*, ROWID, ROWNUM
FROM TBL_AMIGOS A;

--6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).
SELECT A.CANTIDAD_AMIGOS, B.NOMBRE_USUARIO
FROM (
  SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_AMIGOS
  FROM TBL_AMIGOS 
  WHERE CODIGO_ESTATUS = 1
  GROUP BY CODIGO_USUARIO
  ORDER BY CANTIDAD_AMIGOS ASC
) A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE ROWNUM = 1;

SELECT *
FROM (
  SELECT B.NOMBRE_USUARIO, COUNT(1) CANTIDAD_AMIGOS
  FROM TBL_AMIGOS A
  INNER JOIN TBL_USUARIOS B
  ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
  WHERE CODIGO_ESTATUS = 1
  GROUP BY B.NOMBRE_USUARIO
)
WHERE CANTIDAD_AMIGOS = (  
  SELECT MIN(CANTIDAD_AMIGOS)
  FROM (
    SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS 
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
  )
);

--7. Mostrar la cantidad de usuarios registrados mensualmente.
SELECT TO_CHAR(FECHA_REGISTRO, 'YYYY/MONTH') AS MES, COUNT(1) CANTIDAD_USUARIOS_REGISTRADOS
FROM TBL_USUARIOS
GROUP BY TO_CHAR(FECHA_REGISTRO, 'YYYY/MONTH')
ORDER BY MES;

--8. Mostrar la edad promedio de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD)) AS EDAD_PROMEDIO
FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;

--9. Con respecto al historial de accesos se necesita saber el crecimiento de los accesos del día 19 de Agosto del 2015 con respecto al día anterior, la fórmula para calcular dicho crecimiento se muestra a continuación:
--((b-a)/a) * 100
--SELECT ((6-2)/2)*100 FROM DUAL;
/*Donde:
a = Cantidad de accesos del día anterior (18 de Agosto del 2015) 2
b = Cantidad de accesos del día actual (19 de Agosto del 2015) 6
Mostrar el resultado como un porcentaje (Concatenar %)*/

SELECT ((b-a)/a) * 100 || '%' AS CRECIMIENTO
FROM (
  SELECT COUNT(1) A
  FROM TBL_HISTORIAL_ACCESOS
  WHERE FECHA_HORA_ACCESO = TO_DATE('18-08-2015', 'DD-MM-YYYY')
),
(  
  SELECT COUNT(1) B
  FROM TBL_HISTORIAL_ACCESOS
  WHERE FECHA_HORA_ACCESO = TO_DATE('19-08-2015', 'DD-MM-YYYY')
);



SELECT COUNT(1) B
FROM TBL_HISTORIAL_ACCESOS
WHERE TO_CHAR(FECHA_HORA_ACCESO, 'DDMMYYYY') = '19082015';

/*10. Crear una consulta que muestre lo siguiente:
? Nombre del usuario.
? País donde pertenece.
? Cantidad de publicaciones que tiene.
? Cantidad de amigos confirmados.
? Cantidad de likes que ha dado.
? Cantidad de fotos en las que ha sido etiquetado.
? Cantidad de accesos en el historial.
Tip: utilice subconsultas.*/

SELECT  NOMBRE_USUARIO, 
        B.NOMBRE_PAIS, 
        NVL(C.CANTIDAD_PUBLICACIONES,0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS,0) AS CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES_PUBLICACIONES,0) AS CANTIDAD_LIKES_PUBLICACIONES,
        NVL(F.CANTIDAD_LIKES_FOTOGRAFIAS,0) AS CANTIDAD_LIKES_FOTOGRAFIAS,
        NVL(E.CANTIDAD_LIKES_PUBLICACIONES,0) + NVL(F.CANTIDAD_LIKES_FOTOGRAFIAS,0) AS TOTAL_LIKES,
        NVL(G.CANTIDAD_ETIQUETAS_FOTOS,0) AS CANTIDAD_ETIQUETAS_FOTOS,
        NVL(H.CANTIDAD_ACCESOS, 0) AS CANTIDAD_ACCESOS
FROM TBL_USUARIOS A
INNER JOIN TBL_PAISES  B
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN (
  --? Cantidad de publicaciones que tiene.
  SELECT CODIGO_USUARIO, COUNT(1) AS CANTIDAD_PUBLICACIONES
  FROM TBL_PUBLICACIONES
  GROUP BY CODIGO_USUARIO
) C
ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
LEFT JOIN (
  --? Cantidad de amigos confirmados.
  SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_AMIGOS
  FROM TBL_AMIGOS 
  WHERE CODIGO_ESTATUS = 1
  GROUP BY CODIGO_USUARIO
) D
ON (A.CODIGO_USUARIO = D.CODIGO_USUARIO)
LEFT JOIN (
  --? Cantidad de likes que ha dado.
  SELECT CODIGO_USUARIO,COUNT(1) CANTIDAD_LIKES_PUBLICACIONES
  FROM TBL_LIKE_PUBLICACIONES
  GROUP BY CODIGO_USUARIO
) E
ON (A.CODIGO_USUARIO = E.CODIGO_USUARIO)
LEFT JOIN (
  SELECT CODIGO_USUARIO,COUNT(1) CANTIDAD_LIKES_FOTOGRAFIAS
  FROM TBL_LIKE_FOTOGRAFIAS
  GROUP BY CODIGO_USUARIO
) F
ON (A.CODIGO_USUARIO = F.CODIGO_USUARIO)
LEFT JOIN (
  --? Cantidad de fotos en las que ha sido etiquetado.
  SELECT CODIGO_USUARIO, COUNT(1) CANTIDAD_ETIQUETAS_FOTOS
  FROM TBL_ETIQUETA_FOTOGRAFIAS
  GROUP BY CODIGO_USUARIO
) G
ON (A.CODIGO_USUARIO = G.CODIGO_USUARIO)
LEFT JOIN (
  --? Cantidad de accesos en el historial.
  SELECT CODIGO_USUARIO, COUNT(1) AS CANTIDAD_ACCESOS
  FROM TBL_HISTORIAL_ACCESOS
  GROUP BY CODIGO_USUARIO
) H
ON (A.CODIGO_USUARIO = H.CODIGO_USUARIO);

--11. De la consulta anterior cree una vista materializada y utilícela desde una tabla dinámica en Excel para mostrar una gráfica de línea que muestre la cantidad de amigos por cada usuario.